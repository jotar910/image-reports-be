version: '3.9'

services:

  gateway_server:
    build:
      dockerfile: ./api-gateway/Dockerfile
      context: .
    volumes:
      - .:/app
    ports:
      - 8080:8080
    networks:
      image-reports:
        ipv4_address: 10.7.0.2

  users_server:
    build:
      dockerfile: ./users/Dockerfile
      context: .
    volumes:
      - .:/app
    ports:
      - 8081:8081
    depends_on:
      users_database:
        condition: service_healthy
    networks:
      image-reports:
        ipv4_address: 10.7.1.2

  users_database:
    image: postgres
    restart: always
    env_file:
      - users/docker.env
    ports:
      - 1432:5432
    volumes:
      - ./db-data/users:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "users"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      image-reports:
        ipv4_address: 10.7.1.3

  reports_server:
    build:
      dockerfile: ./reporter/Dockerfile
      context: .
    volumes:
      - .:/app
    ports:
      - 8082:8082
    depends_on:
      reports_database:
        condition: service_healthy
    networks:
      image-reports:
        ipv4_address: 10.7.2.2

  reports_database:
    image: postgres
    restart: always
    env_file:
      - reporter/docker.env
    ports:
      - 2432:5432
    volumes:
      - ./db-data/reports:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "reports"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      image-reports:
        ipv4_address: 10.7.2.3

  processing_server:
    build:
      dockerfile: ./processing/Dockerfile
      context: .
    volumes:
      - .:/app
    ports:
      - 8083:8083
    depends_on:
      processing_database:
        condition: service_healthy
    networks:
      image-reports:
        ipv4_address: 10.7.3.2

  processing_database:
    image: postgres
    restart: always
    env_file:
      - processing/docker.env
    ports:
      - 3432:5432
    volumes:
      - ./db-data/evaluations:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "evaluations"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      image-reports:
        ipv4_address: 10.7.3.3

  storage_server:
    build:
      dockerfile: ./storage/Dockerfile
      context: .
    volumes:
      - .:/app
    ports:
      - 8083:8083
    depends_on:
      processing_database:
        condition: service_healthy
    networks:
      image-reports:
        ipv4_address: 10.7.4.2
  
  init-databases:
    image: postgres
    container_name: init-databases
    command: ["echo", "'Databases were initiated'"]
    depends_on:
      users_database:
        condition: service_healthy
      reports_database:
        condition: service_healthy
      processing_database:
        condition: service_healthy

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      image-reports:
        ipv4_address: 10.7.10.2
  
  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:29092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      image-reports:
        ipv4_address: 10.7.10.3
  
  init-kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: init-kafka
    command: ["echo", "'Kafka was initiated'"]
    depends_on:
      kafka:
        condition: service_healthy

networks:
  image-reports:
    driver: bridge
    ipam:
      config:
        - subnet: 10.7.0.0/16
          gateway: 10.7.0.1